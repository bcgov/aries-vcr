version: 2
jobs:
  build:
    docker:
      - image: bcgovimages/von-image:py36-1.8-0
    steps:
      - checkout
      - restore_cache:
          keys:
            - pip-dependencies-{{ checksum "agent/requirements.txt" }}-{{ checksum "agent/requirements.dev.txt" }}
            - pip-dependencies-
      - run:
          name: Install Python Dependencies
          command: |
            cd agent
            pip3 install \
              -r requirements.txt \
              -r requirements.dev.txt \
              pytest

      - save_cache:
          paths:
            - $HOME/.cache/pip
          key: pip-dependencies-{{ checksum "agent/requirements.txt" }}-{{ checksum "agent/requirements.dev.txt" }}

      - run:
          name: Run Agent Tests
          command: |
            mkdir test-reports
            mkdir test-reports/pytest
            cd agent
            pytest --quiet --junitxml=../test-reports/pytest/junit.xml

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports
      # - run:
      #     name: Push to Codecov.io (Optional Step)
      #     command: |
      #         cp ~/tests/apex/test-result-codecoverage.json .
      #         bash <(curl -s https://codecov.io/bash)
      # - run:
      #     name: Clean Up
      #     when: always
      #     command: |
      #         node_modules/sfdx-cli/bin/run force:org:delete -u scratch -p
      #         rm ~/tests/apex/*.txt ~/tests/apex/test-result-7*.json
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#       # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
#       - image: circleci/python:3.6.1

#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # - image: circleci/postgres:9.4

#     working_directory: ~/repo

#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum "requirements.txt" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-

#       - run:
#           name: install dependencies
#           command: |
#             python3 -m venv venv
#             . venv/bin/activate
#             pip install -r requirements.txt

#       - save_cache:
#           paths:
#             - ./venv
#           key: v1-dependencies-{{ checksum "requirements.txt" }}

#       # run tests!
#       # this example uses Django's built-in test-runner
#       # other common Python testing frameworks include pytest and nose
#       # https://pytest.org
#       # https://nose.readthedocs.io
#       - run:
#           name: run tests
#           command: |
#             . venv/bin/activate
#             python manage.py test

#       - store_artifacts:
#           path: test-reports
#           destination: test-reports
